/*
 * gpio_irq.c
 *
 *  Created on: 2018¦~8¤ë24¤é
 *      Author: VLSILAB
 */

#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"

#define INTC_DEVICE_ID     XPAR_PS7_SCUGIC_0_DEVICE_ID
#define SW_DEVICE_ID       XPAR_GPIO_0_DEVICE_ID
#define BTN_DEVICE_ID      XPAR_GPIO_1_DEVICE_ID
#define LED_DEVICE_ID      XPAR_GPIO_2_DEVICE_ID
#define INTC_BTN_INTERRUPT XPAR_FABRIC_AXI_GPIO_1_IP2INTC_IRPT_INTR

#define BTN_INT XGPIO_IR_CH1_MASK

#define LED_DELAY     10000000

XGpio LED_Gpio, SW_Gpio, BTN_Gpio;
XScuGic INTC_inst;
u32 led_data = 0x00, sw_data, btn_data;

static void BTNIntrHandler(void *baseaddr_p);
static int interruptSysSetup(XScuGic *XScuGicInstPtr);
static int intcInitFunc(u16 device_ID, XGpio *GpioPtr);

int main() {
	int LED_Status, SW_Status, BTN_Status, status;
	LED_Status = XGpio_Initialize(&LED_Gpio, LED_DEVICE_ID);
	SW_Status = XGpio_Initialize(&SW_Gpio, SW_DEVICE_ID);
	BTN_Status = XGpio_Initialize(&BTN_Gpio, BTN_DEVICE_ID);
	if ((LED_Status != XST_SUCCESS) || (SW_Status != XST_SUCCESS)
			|| (BTN_Status != XST_SUCCESS)) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&LED_Gpio, 1, 0x00);
	XGpio_SetDataDirection(&SW_Gpio, 1, 0x03);
	XGpio_SetDataDirection(&BTN_Gpio, 1, 0x0f);

	status = intcInitFunc(INTC_DEVICE_ID, &BTN_Gpio);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	while (1) {
		sw_data = XGpio_DiscreteRead(&SW_Gpio, 1);
		if (sw_data == 0) led_data ++;
		else if (sw_data == 1) led_data--;
		else led_data = led_data;
		XGpio_DiscreteWrite(&LED_Gpio, 1, led_data);
		for (int i=0; i<LED_DELAY; i++);
	}
	return 0;
}

static void BTNIntrHandler(void *baseaddr_p) {

	int btn = 0;

	XGpio_InterruptDisable(&BTN_Gpio, BTN_INT);

	if ((XGpio_InterruptGetStatus(&BTN_Gpio) & BTN_INT) != BTN_INT) {
		return;
	}

	btn_data = XGpio_DiscreteRead(&BTN_Gpio, 1);
	led_data = (btn_data != 8) ? btn_data : 0;
	XGpio_DiscreteWrite(&LED_Gpio, 1, led_data);


	(void) XGpio_InterruptClear(&BTN_Gpio, BTN_INT);

	XGpio_InterruptEnable(&BTN_Gpio, BTN_INT);
}
static int interruptSysSetup(XScuGic *XScuGicInstPtr) {
	XGpio_InterruptEnable(&BTN_Gpio, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTN_Gpio);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstPtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

static int intcInitFunc(u16 device_ID, XGpio *GpioPtr) {
	XScuGic_Config *intc_config;
	int status;

	intc_config = XScuGic_LookupConfig(device_ID);
	status = XScuGic_CfgInitialize(&INTC_inst, intc_config,
			intc_config->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	status = interruptSysSetup(&INTC_inst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	status = XScuGic_Connect(&INTC_inst, INTC_BTN_INTERRUPT,
			(Xil_ExceptionHandler) BTNIntrHandler, (void *) GpioPtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	XGpio_InterruptEnable(GpioPtr, 1);
	XGpio_InterruptGlobalEnable(GpioPtr);

	XScuGic_Enable(&INTC_inst, INTC_BTN_INTERRUPT);
	return XST_SUCCESS;
}
